<resources>
    <string name="app_name">RxJava-Android-Samples</string>

    <!-- Background work & concurrency (using Schedulers) -->
    <string name="btn_demo_schedulers">bg work (schedulers &amp; concurrency)</string>
    <string name="msg_demo_concurrency_schedulers">This is a demo of how long running operations can be offloaded to a background thread. After the operation is done, we resume back on the main thread. All using RxJava! \n\n To really see this shine. Hit the button multiple times and see how the button click which is a ui operation is never blocked because the long operation only runs in the background</string>
    <string name="btn_start_long_operation">Start long operation</string>

    <!-- accumulate calls (buffer) -->
    <string name="btn_demo_buffer">accumulate calls (buffer)</string>
    <string name="msg_demo_buffer">This is a demo of how events can be accumulated using the "buffer" operation. Tap the button below repetitively and you will notice in the logs that button taps are collected over a span of 2s and printed below.</string>
    <string name="btn_tap_me">Tap me</string>

    <!-- search text listener(debounce) -->
    <string name="btn_demo_debounce">search text listener(debounce)</string>
    <string name="msg_demo_debounce">As you type in the input box, it will not shoot out log messages at every single input character change, but rather only pick the last one.</string>
    <string name="hint_search_text">Enter some search text</string>
    <string name="btn_clear">Clear</string>

    <!-- Retrofit + RxJava -->
    <string name="btn_demo_retrofit">Retrofit + RxJava</string>
    <string name="msg_demo_retrofit">Retrofit from Square is a super easy networking helper library. It works really well with RxJava and these are examples taken from Jake Wharton\'s talk at Netflix (see README). Really the only interesting bits here are in the code and logs.</string>
    <string name="btn_log_contributors_of">get Contributors</string>
    <string name="btn_log_contributors_with_email">with email info</string>
    <string name="owner">owner</string>
    <string name="repo_name">repo name</string>
    <string name="github_oauth_token">0256f8cf99e8fd9596bb23391e60aeefbe5c48e4</string>

    <!-- Two-way data binding for TextViews (using PublishSubject) -->
    <string name="btn_demo_two_way_data_binding">Two-way data binding (PublishSubject)</string>
    <string name="msg_demo_two_way_data_binding">Watch how the result gloriously auto-updates <ba></ba>sed on your changing inputs. Using a technique like this, you could achieve the two-way binding in Angular Js, or more efficiently use a pattern like the Presentation View Model.</string>

    <!-- Polling -->
    <string name="btn_demo_polling">Polling with RxJava</string>
    <string name="msg_demo_polling">Demo polling with RxJava.</string>
    <string name="btn_add_value">Add</string>
    <string name="btn_clear_value">Clear</string>

    <!-- Exponential backoff -->
    <string name="btn_demo_exponential_backoff">Exponential backoff</string>

    <!-- Form Validation with CombineLatest -->
    <string name="btn_demo_form_validation_combinelatest">Form Validation with CombineLatest</string>
    <string name="msg_demo_form_comb_latest">Monitor the state of multiple observables with the combineLatest operator. Only after all the 3 inputs contain valid entries will the submit button light up</string>

    <!-- Pseudo cache using concat -->
    <string name="btn_demo_pseudocache">Pseudo cache using concat</string>
    <string name="concat">concat</string>
    <string name="concat_eager">concatEager</string>
    <string name="merge">merge</string>
    <string name="merge_n_slower_disk">merge\n(slow disk)</string>
    <string name="merge_n_optimized">merge-optimized</string>
    <string name="merge_n_optimized_slow_disk">merge-optimized\n(slow disk)</string>
    <string name="msg_pseudoCache_demoInfo_concat">Concat merges the results sequentially. But notice that the latter subscription starts only AFTER the first one completes. Some unnecessary waiting there.</string>
    <string name="msg_pseudoCache_demoInfo_concatEager">Concat eager is cooler. Both subscriptions start at the same time (in parallel) but the order of emission is respected.</string>
    <string name="msg_pseudoCache_demoInfo_merge">Merge presents the result as they come in which is great if the disk is *always* faster. If not, you have problems.</string>
    <string name="msg_pseudoCache_demoInfo_mergeSlowDisk">Here\'s a fake example where the disk is made slower than the network call. You can see the results are whack.</string>
    <string name="msg_pseudoCache_demoInfo_mergeOptimized">This is an optimized merge and probably want to use. Notice subscriptions happen immediately and network results are respected regardless of when they come in. So if the disk is slower, it is discarded.</string>
    <string name="msg_pseudoCache_demoInfo_mergeOptimizedSlowDisk">Similar to optimized merge (same code). Notice though that if the disk is slower it\'s discarded in favor of the "fresh" network data which in this case happens to be faster.</string>

    <!-- Event Bus with RxJava -->
    <string name="btn_demo_rxbus">Event Bus with RxJava</string>

    <!-- Variations of timing/intervals/delays -->
    <string name="btn_demo_timing">Variations of timing/intervals/delays</string>

    <!-- Timeout long running jobs -->
    <string name="btn_demo_timeout">Timeout long running jobs</string>

    <!-- Rotation persist -->
    <string name="btn_demo_rotation_persist">Rotation persist</string>

    <!-- Volley request demo -->
    <string name="btn_demo_volley">Volley request demo</string>

    <!-- Paging example -->
    <string name="btn_demo_pagination">Paging example</string>

    <!-- Network Detector (Subject) -->
    <string name="btn_demo_networkDetector">Network Detector (Subject)</string>

    <!-- Setup &amp; teardown resources (using) -->
    <string name="btn_demo_using">Setup &amp; teardown resources (using)</string>

    <!-- MultiConnect operator playground -->
    <string name="btn_demo_multicastPlayground">MultiConnect operator playground</string>

</resources>
