<resources>
    <string name="app_name">RxJava-Android-Samples</string>

    <!-- Background work & concurrency (using Schedulers) -->
    <string name="btn_demo_schedulers">bg work (schedulers &amp; concurrency)</string>
    <string name="msg_demo_concurrency_schedulers">This is a demo of how long running operations can be offloaded to a background thread. After the operation is done, we resume back on the main thread. All using RxJava! \n\n To really see this shine. Hit the button multiple times and see how the button click which is a ui operation is never blocked because the long operation only runs in the background</string>
    <string name="btn_start_long_operation">Start long operation</string>

    <!-- accumulate calls (buffer) -->
    <string name="btn_demo_buffer">accumulate calls (buffer)</string>
    <string name="msg_demo_buffer">This is a demo of how events can be accumulated using the "buffer" operation. Tap the button below repetitively and you will notice in the logs that button taps are collected over a span of 2s and printed below.</string>
    <string name="btn_tap_me">Tap me</string>

    <!-- search text listener(debounce) -->
    <string name="btn_demo_debounce">search text listener(debounce)</string>
    <string name="msg_demo_debounce">As you type in the input box, it will not shoot out log messages at every single input character change, but rather only pick the last one.</string>
    <string name="hint_search_text">Enter some search text</string>
    <string name="btn_clear">Clear</string>

</resources>
